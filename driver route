import os
import json

# File paths
PASSENGERS_JSON = "data/passengers.json"
DRIVERS_JSON    = "data/drivers.json"
BOOKINGS_JSON   = "data/bookings.json"
USERS_JSON      = "data/users.json"

def load_json(filepath):
    if os.path.exists(filepath):
        try:
            with open(filepath, "r") as f:
                content = f.read().strip()
                return json.loads(content) if content else []
        except json.JSONDecodeError:
            return []
    return []

def save_json(filepath, data):
    os.makedirs(os.path.dirname(filepath), exist_ok=True)
    with open(filepath, "w") as f:
        json.dump(data, f, indent=4)

# Loaders
def load_passengers():
    return load_json(PASSENGERS_JSON)

def load_drivers():
    return load_json(DRIVERS_JSON)

def load_bookings():
    return load_json(BOOKINGS_JSON)

def load_users():
    return load_json(USERS_JSON)

# Savers
def save_passenger(passenger_data):
    passengers = load_passengers()
    passengers.append(passenger_data)
    save_json(PASSENGERS_JSON, passengers)

def save_driver(driver_data):
    drivers = load_drivers()
    drivers.append(driver_data)
    save_json(DRIVERS_JSON, drivers)

def save_booking(booking_data):
    bookings = load_bookings()
    bookings.append(booking_data)
    save_json(BOOKINGS_JSON, bookings)

def save_user(user_data):
    users = load_users()
    users.append(user_data)
    save_json(USERS_JSON, users)

def username_exists(username):
    users = load_users()
    return any(user["username"] == username for user in users)

# Matching driver with passenger route
def find_matches(route_info):
    drivers = load_drivers()
    matches = [
        d for d in drivers
        if d.get('from', '').strip().lower() == route_info['from'].strip().lower()
        and d.get('to',   '').strip().lower() == route_info['to'].strip().lower()
        and d.get('date') == route_info['date']
    ]
    return matches

# Update driver's route (upsert)
def update_driver_route(username, new_route):
    """
    Upsert a driver's route:
     - If a driver with this username exists, update their route.
     - Otherwise, append a new minimal record with username + route.
    """
    drivers = load_drivers()
    updated = False

    for d in drivers:
        if d.get("username") == username:
            # Update existing record
            d["from"] = new_route["from"]
            d["to"]   = new_route["to"]
            d["date"] = new_route["date"]
            d["time"] = new_route["time"]
            updated = True
            break

    if not updated:
        # No existing profile found: create minimal one
        drivers.append({
            "username": username,
            "from":     new_route["from"],
            "to":       new_route["to"],
            "date":     new_route["date"],
            "time":     new_route["time"]
        })
        updated = True

    if updated:
        save_json(DRIVERS_JSON, drivers)
    return updated
